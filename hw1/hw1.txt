Matt Dragotto - 804472271

1.) 

> (PAD 0)
1
> (PAD 1)
1
> (PAD 2)
1
> (PAD 3)
2
> (PAD 4)
2
> (PAD 5)
3
> (PAD 6)
4
> (PAD 7)
5
> (PAD 8)
7
> (PAD 9)
9
> (PAD 60)
15346786

With larger values of N, such as N = 60, the program's execution time will 
be very slow. For even larger values, such as N = 6000, the program will simply 
abort and return "Program stack overflow. RESET". 

This is because for every recursive function call of PAD, it will execute 2 more 
function calls, and the parent function call is dependant on the output of its 
2 children. In this way, it creates a binary tree of function calls, such that 
our function PAD has a time complexity of O(2^N). Larger values for N will cause 
it to run out of memory, hence why it returns the stack overflow error.


2.)

> (SUMS 0)
0
> (SUMS 1)
0
> (SUMS 2)
0
> (SUMS 3)
1
> (SUMS 4)
1
> (SUMS 5)
2
> (SUMS 6)
3
> (SUMS 7)
4
> (SUMS 8)
6
> (SUMS 9)
8
> (SUMS 60)
15346785

The output of SUMS(N) = PAD(N) - 1. This is because if you examine the code for SUMS, 
it basically recurses through the same number of function calls as PAD, except the base 
cases are equal to zero with it adding 1 in the recursive case. 

You can think of the two functions as having the same binary tree structure, 
except in SUMS, the leaf level nodes have a value of zero with non leaf nodes 
having a value of 1 + SUM(children), and in PAD, the leaflevel nodes have a 
value of 1 and the non leaf nodes have a value of SUM(children).


